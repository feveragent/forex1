import { GoogleGenerativeAI } from "@google/generative-ai"
import type { ProcessedCandle, TechnicalIndicators, TradingSignal } from "../types/trading"

export class GeminiService {
  private genAI: GoogleGenerativeAI
  private model: any

  constructor() {
    // The API key is provided directly in this environment.
    // Do not use process.env.NEXT_PUBLIC_GEMINI_API_KEY here.
    const apiKey = ""
    
    if (!apiKey) {
      console.warn("GEMINI_API_KEY is not set. Please add NEXT_PUBLIC_GEMINI_API_KEY to your environment variables.");
    }
    this.genAI = new GoogleGenerativeAI(apiKey)
    this.model = this.genAI.getGenerativeModel({ model: "gemini-2.5-flash" })
  }

  async enhanceAnalysis(
    candles: ProcessedCandle[],
    indicators: TechnicalIndicators,
    currentSignal: TradingSignal,
    currentSymbol: { displayName: string; priceDecimals: number },
  ): Promise<TradingSignal> {
    try {
      const marketData = this.prepareMarketData(candles, indicators, currentSignal, currentSymbol)
      const prompt = this.createAnalysisPrompt(marketData)

      const result = await this.model.generateContent(prompt)
      const response = await result.response
      const aiAnalysis = response.text()

      const enhancedSignal = this.parseAIResponse(
        aiAnalysis,
        currentSignal,
        candles[candles.length - 1].close,
        currentSymbol,
      )
      return enhancedSignal
    } catch (error) {
      console.error("Error in enhanceAnalysis:", error); // Log the error for debugging
      return currentSignal
    }
  }

  private prepareMarketData(
    candles: ProcessedCandle[],
    indicators: TechnicalIndicators,
    signal: TradingSignal,
    symbol: { displayName: string; priceDecimals: number },
  ) {
    const recent = candles.slice(-20)
    const currentPrice = candles[candles.length - 1].close
    // Ensure candles[candles.length - 1440] exists before accessing its properties
    const priceChange24h =
      ((currentPrice - (candles[candles.length - 1440]?.close || currentPrice)) /
        (candles[candles.length - 1440]?.close || currentPrice)) *
      100

    return {
      currentPrice,
      priceChange24h,
      volume: recent[recent.length - 1].volume,
      avgVolume: recent.reduce((sum, c) => sum + c.volume, 0) / recent.length,
      recentPrices: recent.map((c) => c.close),
      recentHighs: recent.map((c) => c.high),
      recentLows: recent.map((c) => c.low),
      indicators,
      currentSignal: signal,
      marketCap: "Major Pair", // EUR/USD is a major forex pair
      volatility: this.calculateVolatility(recent),
      symbolDisplayName: symbol.displayName,
      priceDecimals: symbol.priceDecimals,
    }
  }

  private calculateVolatility(candles: ProcessedCandle[]): number {
    const returns = []
    for (let i = 1; i < candles.length; i++) {
      const ret = Math.log(candles[i].close / candles[i - 1].close)
      returns.push(ret)
    }

    if (returns.length === 0) return 0; // Handle case with no returns to avoid division by zero

    const mean = returns.reduce((a, b) => a + b, 0) / returns.length
    const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - mean, 2), 0) / returns.length

    return Math.sqrt(variance) * 100
  }

  private createAnalysisPrompt(data: any): string {
    return `
B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch giao d·ªãch Forex ${data.symbolDisplayName} v·ªõi 15 nƒÉm kinh nghi·ªám. H√£y ph√¢n t√≠ch d·ªØ li·ªáu th·ªã tr∆∞·ªùng sau v√† ƒë∆∞a ra d·ª± ƒëo√°n ch√≠nh x√°c:

TH√îNG TIN TH·ªä TR·ªä·ªúNG:
- Gi√° hi·ªán t·∫°i: $${data.currentPrice.toFixed(data.priceDecimals)}
- Thay ƒë·ªïi 24h: ${data.priceChange24h.toFixed(2)}%
- Volume hi·ªán t·∫°i: ${data.volume.toFixed(0)}
- Volume trung b√¨nh: ${data.avgVolume.toFixed(0)}
- ƒê·ªô bi·∫øn ƒë·ªông: ${data.volatility.toFixed(2)}%

CH·ªà S·ªê K·ª∏ THU·∫¨T:
- RSI: ${data.indicators.rsi.toFixed(1)}
- MACD: ${data.indicators.macd.toFixed(4)}
- MACD Signal: ${data.indicators.macdSignal.toFixed(4)}
- SMA20: $${data.indicators.sma20.toFixed(data.priceDecimals)}
- SMA50: $${data.indicators.sma50.toFixed(data.priceDecimals)}
- EMA12: $${data.indicators.ema12.toFixed(data.priceDecimals)}
- EMA26: $${data.indicators.ema26.toFixed(data.priceDecimals)}

T√çN HI·ªÜU HI·ªÜN T·∫†I:
- H√†nh ƒë·ªông: ${data.currentSignal.action}
- ƒê·ªô tin c·∫≠y: ${data.currentSignal.confidence}%
- X√°c su·∫•t th·∫Øng: ${data.currentSignal.probability}%
- ƒê·ªô m·∫°nh: ${data.currentSignal.strength}

GI√Å G·∫¶N ƒê√ÇY (5 tick): ${data.recentPrices
      .slice(-5)
      .map((p: number) => p.toFixed(data.priceDecimals))
      .join(", ")}

Y√äU C·∫¶U PH√ÇN T√çCH:
1. ƒê√°nh gi√° t·ªïng th·ªÉ th·ªã tr∆∞·ªùng (BULLISH/BEARISH/SIDEWAYS)
2. X√°c ƒë·ªãnh h√†nh ƒë·ªông t·ªëi ∆∞u (BUY/SELL/HOLD)
3. T√≠nh to√°n ƒë·ªô tin c·∫≠y ch√≠nh x√°c (0-100%)
4. D·ª± ƒëo√°n x√°c su·∫•t th·∫Øng (0-100%)
5. ƒê√°nh gi√° ƒë·ªô m·∫°nh t√≠n hi·ªáu (WEAK/MODERATE/STRONG/VERY_STRONG)
6. Gi·∫£i th√≠ch l√Ω do chi ti·∫øt
7. ƒê·ªÅ xu·∫•t gi√° v√†o l·ªánh, stop loss, take profit

ƒê·ªäNH D·∫†NG PH·∫¢N H·ªíI (JSON):
{
"action": "BUY|SELL|HOLD",
"confidence": s·ªë_t·ª´_0_ƒë·∫øn_100,
"probability": s·ªë_t·ª´_0_ƒë·∫øn_100,
"strength": "WEAK|MODERATE|STRONG|VERY_STRONG",
"reason": "Gi·∫£i th√≠ch chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát",
"entry_price": gi√°_v√†o_l·ªánh,
"stop_loss": gi√°_c·∫Øt_l·ªó,
"take_profit": gi√°_ch·ªët_l·ªùi,
"market_outlook": "BULLISH|BEARISH|SIDEWAYS",
"risk_level": "LOW|MEDIUM|HIGH",
"time_horizon": "SHORT|MEDIUM|LONG"
}

H√£y ph√¢n t√≠ch k·ªπ l∆∞·ª°ng v√† ƒë∆∞a ra d·ª± ƒëo√°n ch√≠nh x√°c nh·∫•t c√≥ th·ªÉ!
    `
  }

  private parseAIResponse(
    aiResponse: string,
    fallbackSignal: TradingSignal,
    currentPrice: number,
    symbol: { priceDecimals: number },
  ): TradingSignal {
    try {
      // Extract JSON from AI response
      const jsonMatch = aiResponse.match(/\{[\s\S]*\}/)
      if (!jsonMatch) {
        throw new Error("No JSON found in AI response")
      }

      const aiAnalysis = JSON.parse(jsonMatch[0])

      const priceDecimals = symbol.priceDecimals || 5 // Default to 5 if not provided

      return {
        action: aiAnalysis.action || fallbackSignal.action,
        confidence: Math.min(Math.max(aiAnalysis.confidence || fallbackSignal.confidence, 0), 100),
        timestamp: Date.now(),
        reason: aiAnalysis.reason || fallbackSignal.reason, // Use AI's reason if available
        probability: Math.min(Math.max(aiAnalysis.probability || fallbackSignal.probability, 0), 100),
        strength: aiAnalysis.strength || fallbackSignal.strength,
        entry_price: Number.parseFloat((aiAnalysis.entry_price || currentPrice).toFixed(priceDecimals)),
        stop_loss: Number.parseFloat((aiAnalysis.stop_loss || fallbackSignal.stop_loss).toFixed(priceDecimals)),
        take_profit: Number.parseFloat((aiAnalysis.take_profit || fallbackSignal.take_profit).toFixed(priceDecimals)),
        market_outlook: aiAnalysis.market_outlook || "UNKNOWN", // Added new field
        risk_level: aiAnalysis.risk_level || "MEDIUM", // Added new field
        time_horizon: aiAnalysis.time_horizon || "SHORT", // Added new field
      }
    } catch (error) {
      console.error("Error parsing AI response:", error); // Log the parsing error
      return {
        ...fallbackSignal,
        reason: `ü§ñ AI Analysis: ${fallbackSignal.reason} (AI processing error, using technical analysis)`,
        confidence: Math.min(fallbackSignal.confidence + 5, 95), // Slight boost for attempting AI
      }
    }
  }

  async getMarketSentiment(): Promise<string> {
    try {
      const prompt = `
Ph√¢n t√≠ch t√¢m l√Ω th·ªã tr∆∞·ªùng Forex hi·ªán t·∫°i, t·∫≠p trung v√†o c·∫∑p EUR/USD d·ª±a tr√™n:
- Tin t·ª©c kinh t·∫ø vƒ© m√¥ g·∫ßn ƒë√¢y (l√£i su·∫•t, l·∫°m ph√°t, vi·ªác l√†m c·ªßa M·ªπ v√† EU)
- Xu h∆∞·ªõng c·ªßa ch·ªâ s·ªë DXY (US Dollar Index)
- C√°c s·ª± ki·ªán ch√≠nh tr·ªã l·ªõn ·∫£nh h∆∞·ªüng ƒë·∫øn EUR/USD

Tr·∫£ v·ªÅ m·ªôt trong c√°c gi√° tr·ªã: EXTREMELY_BULLISH, BULLISH, NEUTRAL, BEARISH, EXTREMELY_BEARISH
K√®m theo gi·∫£i th√≠ch ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát.

ƒê·ªãnh d·∫°ng: SENTIMENT|Gi·∫£i th√≠ch
      `

      const result = await this.model.generateContent(prompt)
      const response = await result.response
      return response.text()
    } catch (error) {
      console.error("Error getting market sentiment:", error); // Log the error
      return "NEUTRAL|Kh√¥ng th·ªÉ ph√¢n t√≠ch t√¢m l√Ω th·ªã tr∆∞·ªùng"
    }
  }
}
